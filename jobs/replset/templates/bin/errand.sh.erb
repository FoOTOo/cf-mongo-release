#!/usr/bin/env bash
function log() {
	timestamp=$(date "+%Y-%m-%d %H:%M:%S")
	echo "========================================================================================"
	echo -e "[$timestamp]: $1"
	echo "========================================================================================"
}

function ping_until_alive() {
	local ip="$1"
	local port="$2"
	local max_tries="$3"
	local counter=0
	local return_code=0
	while true;
	do
		nc -w 2 -z "$ip" "$port"> /dev/null
		return_code="$?"
		# breaks loop when host is alive or after $max_tries
		if [[ "$return_code" -eq 0 ]]; then
			log "Node $i is online!"
			return_code=0
			break;
		fi
		if [[ "$counter" -ge "${max_tries}" ]]; then
			log "Node $i is offline! (Timeout after $((max_tries*=10)) seconds. )"
			return_code=1
			break;
		fi
		((counter+=1))

		[[ "$max_tries" -gt 1 ]] && sleep 10
	done
	return "$return_code"
}

log "SCRIPT VERSION 2"

# Add all binary packages into $PATH
declare -A seen_dir
while read -rd '' f; do
    seen_dir["${f%/*}"]=1
done < <(find /var/vcap/data/packages -type f -executable -print0)
export PATH="${!seen_dir[@]}:$PATH"

MANAGE_NODES_SCRIPT="/var/vcap/jobs/replset/helpers/manage_nodes.js"

MONGODB_USER=<%= p("mongod.root.user") %>
MONGODB_PASS=<%= p("mongod.root.pass") %>

members=()
members_ip=()
<% p("mongod.nodes.ips").each_with_index do |node, index| %>
	members[${#members[@]}]="{_id: <%= index %>, host:\"<%= node %>:<%= p("mongod.nodes.port") %>\"},"
	members_ip[${#members_ip[@]}]="<%= node %>"
<% end %>
members[${#members[@]}-1]=${members[${#members[@]}-1]::-1}
config="{_id:\"<%= p("mongod.replSet.name") %>\",members:[${members[@]}]}"


client_param="<%= p("mongod.replSet.name") %>/"
for i in "${members_ip[@]}"
do
	client_param="${client_param}$i,"
done
# delete last comma
client_param=${client_param::-1}

log "Reconfiguring replica set with hosts ${client_param}...\nConfig: $config"
#exec chpst -u vcap:vcap printf '%s\n' 'use admin;' "db.auth(\"$MONGODB_USER\", \"$MONGODB_PASS\");" "rs.reconfig($config);" | mongo --host "$client_param" -
exec chpst -u vcap:vcap mongo --host "$client_param" < "$MANAGE_NODES_SCRIPT"
log "Return code for reconfiguring replica set: $?"


	# {
	# 	# waiting until all nodes are online and updated
	# 	client_param="<%= p("mongod.replSet.name") %>/"
	# 	nodes_online=0
	# 	for i in "${members_ip[@]}"
	# 	do
	# 		log "Checking if node $i is running..."
	# 		ping_until_alive "$i" "<%= p("mongod.nodes.port") %>" "30" && ((nodes_online+=1))
	# 		client_param="${client_param}$i,"
	# 	done
	# 	# delete last comma
	# 	client_param=${client_param::-1}


	# 	# Try to inizialize (fails once already initialized) then force reconfiguration
	# 	firstCfg="{_id : \"<%= p("mongod.replSet.name") %>\", members : [{_id : 0, host : \"${members_ip[0]}\"}]}"
	# 	log "First rs.initialization on localhost...\nConfig: $firstCfg"
	# 	exec chpst -u vcap:vcap printf '%s\n' 'use admin;' "rs.initiate($firstCfg);" | mongo -
	# 	log "$?"

	# 	sleep 5
	# 	# Create admin user
	# 	log "Creating MongoDB user ${MONGODB_USER}..."
	# 	exec chpst -u vcap:vcap printf '%s\n' 'use admin;' "if (db.system.users.find({user:\"$MONGODB_USER\"}).count() == 0) {db.createUser({user: \"$MONGODB_USER\", pwd: \"$MONGODB_PASS\", roles: [\"root\"]})} else {print(\"User $MONGODB_USER already exists.\")}" | mongo -
	# 	log "Creating MongoDB user ${MONGODB_USER}... $?"


	# 	log "reconfig on localhost"
	# 	# Unautorized access to the localhost for the firt run
	# 	exec chpst -u vcap:vcap printf '%s\n' 'use admin;' "db.auth(\"$MONGODB_USER\", \"$MONGODB_PASS\");" "rs.reconfig($config);" | mongo -
	# 	#exec chpst -u vcap:vcap mongo --host "$client_param" < "/var/vcap/jobs/mongod/helpers/manage_nodes.js"
	# 	log "reconfig on localhost $?"


	# 	log "reconfig on replication set"
	# 	# Authorized access to the replication set for existing configuration
	# 	log "Configuring replica set with hosts ${client_param}...\nConfig: $config"
	# 	exec chpst -u vcap:vcap printf '%s\n' 'use admin;' "db.auth(\"$MONGODB_USER\", \"$MONGODB_PASS\");" "rs.reconfig($config);" | mongo --host "$client_param" -
	# 	#exec chpst -u vcap:vcap mongo --host "$client_param" < "/var/vcap/jobs/mongod/helpers/manage_nodes.js"
	# 	log "NAVRATOVY KOD $?"
	# } & # run this in the background


