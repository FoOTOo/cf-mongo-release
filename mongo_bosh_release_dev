#!/usr/bin/env bash

set -e

fail() { echo -e "$*" ; exit 1 ; }

bosh_cli_check() {
  if ! command -v bosh &>/dev/null
  then fail "'bosh' command was not found in your path, please 'gem install bosh_cli' and try again."
  fi
}

bosh_target_check() {
  boshTarget=$(bosh target 2>&1)
  case "${boshTarget}" in
    (Current\ target\ is*)
      echo ${boshTarget}
      ;;
    (*)
      fail "A bosh director is not targeted, please target a director and login then try again."
      ;;
  esac
}

spiff_check() {
  if ! command -v spruce &>/dev/null
  then fail "spruce is not installed. Please download at https://github.com/geofffranks/spruce/releases"
  fi
}

usage() {
  echo "Usage: $0 <prepare|blobs|release>"
}

select_infrastructure() {
  infrastructure=${1:-}
  if ! [[ -n ${infrastructure:-} ]]
  then
    usage
    fail
  fi
}


prepare_blobs() {
  [ -d "${releasePath}/blobs" ] || mkdir "${releasePath}/blobs"
  echo "Preparing all packages..."

  #find -path './packages/*' -name prepare -type f -exec bash -c "[ -s ${releasePath}/blobs/${0:2} ] && ( echo $releasePath/blobs/${0:2}; cd ${releasePath}/blobs ; $SHELL ${releasePath}/${0:2} )" {} \;
  for prep in $(find -path './packages/*' -name prepare -type f)
  do
    if [ -s ${prep} ]
    then
      echo ${prep}
      ( cd ${releasePath}/blobs ; ${SHELL} ${releasePath}/${prep} )
    else
      echo Could not find ${prep}
    fi
  done
}

prepare_dev_release() {
  echo "bosh create release --with-tarball --force"
  bosh create release --with-tarball --force
  echo "bosh -n upload release"
  bosh -n upload release
}

gen_manifest() {
  spruce merge --prune meta \
    $templatesPath/deployment.yml \
    $templatesPath/jobs.yml \
    $templatesPath/infrastructure-${infrastructure}.yml \
  	$templatesPath/properties.yml \
    $templatesPath/stub.yml \
    $*
}

releasePath=$(cd $(dirname $0) ; echo $PWD)
templatesPath="${releasePath}/templates"

if (( $# > 0 ))
then
  action=$1
  shift
else
  usage
  fail
fi

bosh_target_check
bosh_cli_check
spiff_check

declare -a args
if (( ${#@} ))
then args=($(echo "${@}"))
fi
case ${action} in
  (prepare)
    prepare_blobs
    prepare_dev_release
    ;;
  (release)
    prepare_dev_release
    ;;
  (blobs)
    prepare_blobs
    ;;
  (manifest)
    select_infrastructure
    gen_manifest
    ;;
  (*)
    usage
    fail "Unknown action ${action}."
    ;;
esac

exit 0
